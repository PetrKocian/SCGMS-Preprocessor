#include "combined_descriptors.h"static std::vector<scgms::TFilter_Descriptor*> all_descriptors;static bool descriptors_loaded = false;bool get_all_descriptors(){	scgms::TFilter_Descriptor* desc_begin, * desc_end; 	bool result = do_get_filter_descriptors_data_filter(&desc_begin, &desc_end) == S_OK;	if (result)	{		for (auto iter = desc_begin; iter != desc_end; iter++)		{			all_descriptors.push_back(iter); 		}	}	else	{		return result; 	}	result = do_get_filter_descriptors_modify_filter(&desc_begin, &desc_end) == S_OK;	if (result)	{		for (auto iter = desc_begin; iter != desc_end; iter++)		{			all_descriptors.push_back(iter); 		}	}	else	{		return result; 	}	result = do_get_filter_descriptors_print_filter(&desc_begin, &desc_end) == S_OK;	if (result) {		for (auto iter = desc_begin; iter != desc_end; iter++)		{			all_descriptors.push_back(iter); 		}	}	else	{		return result; 	}	if (result)	{		descriptors_loaded = true; 	}	return result;}bool get_filter_descriptor_by_id_combined(const GUID & id, scgms::TFilter_Descriptor & desc){	bool result = false;	if (!descriptors_loaded)	{		if (!get_all_descriptors())			return result;	}	for (auto iter : all_descriptors)	{		if (iter->id == id) {			memcpy(&desc, iter, sizeof(decltype(desc)));			result = true;			break;			}	}	return result;}scgms::SFilter create_filter_body_combined(const GUID& id, scgms::IFilter* next_filter){	scgms::SFilter result; 	scgms::IFilter* filter; 	if (do_create_filter_data_filter(&id, next_filter, &filter) == S_OK)	{		result = refcnt::make_shared_reference_ext<scgms::SFilter, scgms::IFilter>(filter, false); 		return result; 	}	if (do_create_filter_modify_filter(&id, next_filter, &filter) == S_OK)	{		result = refcnt::make_shared_reference_ext<scgms::SFilter, scgms::IFilter>(filter, false); 		return result; 	}	if (do_create_filter_print_filter(&id, next_filter, &filter) == S_OK)	{		result = refcnt::make_shared_reference_ext<scgms::SFilter, scgms::IFilter>(filter, false); 		return result; 	}	return result; }